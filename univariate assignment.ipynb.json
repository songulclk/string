{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "40980319",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PRIMARY_KEY</th>\n",
       "      <th>STATE</th>\n",
       "      <th>YEAR</th>\n",
       "      <th>ENROLL</th>\n",
       "      <th>TOTAL_REVENUE</th>\n",
       "      <th>FEDERAL_REVENUE</th>\n",
       "      <th>STATE_REVENUE</th>\n",
       "      <th>LOCAL_REVENUE</th>\n",
       "      <th>TOTAL_EXPENDITURE</th>\n",
       "      <th>INSTRUCTION_EXPENDITURE</th>\n",
       "      <th>...</th>\n",
       "      <th>GRADES_4_G</th>\n",
       "      <th>GRADES_8_G</th>\n",
       "      <th>GRADES_12_G</th>\n",
       "      <th>GRADES_1_8_G</th>\n",
       "      <th>GRADES_9_12_G</th>\n",
       "      <th>GRADES_ALL_G</th>\n",
       "      <th>AVG_MATH_4_SCORE</th>\n",
       "      <th>AVG_MATH_8_SCORE</th>\n",
       "      <th>AVG_READING_4_SCORE</th>\n",
       "      <th>AVG_READING_8_SCORE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1992_ALABAMA</td>\n",
       "      <td>ALABAMA</td>\n",
       "      <td>1992</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2678885.0</td>\n",
       "      <td>304177.0</td>\n",
       "      <td>1659028.0</td>\n",
       "      <td>715680.0</td>\n",
       "      <td>2653798.0</td>\n",
       "      <td>1481703.0</td>\n",
       "      <td>...</td>\n",
       "      <td>57948.0</td>\n",
       "      <td>58025.0</td>\n",
       "      <td>41167.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>731634.0</td>\n",
       "      <td>208.0</td>\n",
       "      <td>252.0</td>\n",
       "      <td>207.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1992_ALASKA</td>\n",
       "      <td>ALASKA</td>\n",
       "      <td>1992</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1049591.0</td>\n",
       "      <td>106780.0</td>\n",
       "      <td>720711.0</td>\n",
       "      <td>222100.0</td>\n",
       "      <td>972488.0</td>\n",
       "      <td>498362.0</td>\n",
       "      <td>...</td>\n",
       "      <td>9748.0</td>\n",
       "      <td>8789.0</td>\n",
       "      <td>6714.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>122487.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1992_ARIZONA</td>\n",
       "      <td>ARIZONA</td>\n",
       "      <td>1992</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3258079.0</td>\n",
       "      <td>297888.0</td>\n",
       "      <td>1369815.0</td>\n",
       "      <td>1590376.0</td>\n",
       "      <td>3401580.0</td>\n",
       "      <td>1435908.0</td>\n",
       "      <td>...</td>\n",
       "      <td>55433.0</td>\n",
       "      <td>49081.0</td>\n",
       "      <td>37410.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>673477.0</td>\n",
       "      <td>215.0</td>\n",
       "      <td>265.0</td>\n",
       "      <td>209.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1992_ARKANSAS</td>\n",
       "      <td>ARKANSAS</td>\n",
       "      <td>1992</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1711959.0</td>\n",
       "      <td>178571.0</td>\n",
       "      <td>958785.0</td>\n",
       "      <td>574603.0</td>\n",
       "      <td>1743022.0</td>\n",
       "      <td>964323.0</td>\n",
       "      <td>...</td>\n",
       "      <td>34632.0</td>\n",
       "      <td>36011.0</td>\n",
       "      <td>27651.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>441490.0</td>\n",
       "      <td>210.0</td>\n",
       "      <td>256.0</td>\n",
       "      <td>211.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1992_CALIFORNIA</td>\n",
       "      <td>CALIFORNIA</td>\n",
       "      <td>1992</td>\n",
       "      <td>NaN</td>\n",
       "      <td>26260025.0</td>\n",
       "      <td>2072470.0</td>\n",
       "      <td>16546514.0</td>\n",
       "      <td>7641041.0</td>\n",
       "      <td>27138832.0</td>\n",
       "      <td>14358922.0</td>\n",
       "      <td>...</td>\n",
       "      <td>418418.0</td>\n",
       "      <td>363296.0</td>\n",
       "      <td>270675.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5254844.0</td>\n",
       "      <td>208.0</td>\n",
       "      <td>261.0</td>\n",
       "      <td>202.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 25 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       PRIMARY_KEY       STATE  YEAR  ENROLL  TOTAL_REVENUE  FEDERAL_REVENUE  \\\n",
       "0     1992_ALABAMA     ALABAMA  1992     NaN      2678885.0         304177.0   \n",
       "1      1992_ALASKA      ALASKA  1992     NaN      1049591.0         106780.0   \n",
       "2     1992_ARIZONA     ARIZONA  1992     NaN      3258079.0         297888.0   \n",
       "3    1992_ARKANSAS    ARKANSAS  1992     NaN      1711959.0         178571.0   \n",
       "4  1992_CALIFORNIA  CALIFORNIA  1992     NaN     26260025.0        2072470.0   \n",
       "\n",
       "   STATE_REVENUE  LOCAL_REVENUE  TOTAL_EXPENDITURE  INSTRUCTION_EXPENDITURE  \\\n",
       "0      1659028.0       715680.0          2653798.0                1481703.0   \n",
       "1       720711.0       222100.0           972488.0                 498362.0   \n",
       "2      1369815.0      1590376.0          3401580.0                1435908.0   \n",
       "3       958785.0       574603.0          1743022.0                 964323.0   \n",
       "4     16546514.0      7641041.0         27138832.0               14358922.0   \n",
       "\n",
       "   ...  GRADES_4_G  GRADES_8_G  GRADES_12_G  GRADES_1_8_G  GRADES_9_12_G  \\\n",
       "0  ...     57948.0     58025.0      41167.0           NaN            NaN   \n",
       "1  ...      9748.0      8789.0       6714.0           NaN            NaN   \n",
       "2  ...     55433.0     49081.0      37410.0           NaN            NaN   \n",
       "3  ...     34632.0     36011.0      27651.0           NaN            NaN   \n",
       "4  ...    418418.0    363296.0     270675.0           NaN            NaN   \n",
       "\n",
       "   GRADES_ALL_G  AVG_MATH_4_SCORE  AVG_MATH_8_SCORE  AVG_READING_4_SCORE  \\\n",
       "0      731634.0             208.0             252.0                207.0   \n",
       "1      122487.0               NaN               NaN                  NaN   \n",
       "2      673477.0             215.0             265.0                209.0   \n",
       "3      441490.0             210.0             256.0                211.0   \n",
       "4     5254844.0             208.0             261.0                202.0   \n",
       "\n",
       "   AVG_READING_8_SCORE  \n",
       "0                  NaN  \n",
       "1                  NaN  \n",
       "2                  NaN  \n",
       "3                  NaN  \n",
       "4                  NaN  \n",
       "\n",
       "[5 rows x 25 columns]"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "states=pd.read_csv('states_all.csv')\n",
    "states.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f8a8136d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>YEAR</th>\n",
       "      <th>ENROLL</th>\n",
       "      <th>TOTAL_REVENUE</th>\n",
       "      <th>FEDERAL_REVENUE</th>\n",
       "      <th>STATE_REVENUE</th>\n",
       "      <th>LOCAL_REVENUE</th>\n",
       "      <th>TOTAL_EXPENDITURE</th>\n",
       "      <th>INSTRUCTION_EXPENDITURE</th>\n",
       "      <th>SUPPORT_SERVICES_EXPENDITURE</th>\n",
       "      <th>OTHER_EXPENDITURE</th>\n",
       "      <th>...</th>\n",
       "      <th>GRADES_4_G</th>\n",
       "      <th>GRADES_8_G</th>\n",
       "      <th>GRADES_12_G</th>\n",
       "      <th>GRADES_1_8_G</th>\n",
       "      <th>GRADES_9_12_G</th>\n",
       "      <th>GRADES_ALL_G</th>\n",
       "      <th>AVG_MATH_4_SCORE</th>\n",
       "      <th>AVG_MATH_8_SCORE</th>\n",
       "      <th>AVG_READING_4_SCORE</th>\n",
       "      <th>AVG_READING_8_SCORE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1715.000000</td>\n",
       "      <td>1.224000e+03</td>\n",
       "      <td>1.275000e+03</td>\n",
       "      <td>1.275000e+03</td>\n",
       "      <td>1.275000e+03</td>\n",
       "      <td>1.275000e+03</td>\n",
       "      <td>1.275000e+03</td>\n",
       "      <td>1.275000e+03</td>\n",
       "      <td>1.275000e+03</td>\n",
       "      <td>1.224000e+03</td>\n",
       "      <td>...</td>\n",
       "      <td>1632.000000</td>\n",
       "      <td>1632.000000</td>\n",
       "      <td>1632.000000</td>\n",
       "      <td>1.020000e+03</td>\n",
       "      <td>1.071000e+03</td>\n",
       "      <td>1.632000e+03</td>\n",
       "      <td>565.000000</td>\n",
       "      <td>602.000000</td>\n",
       "      <td>650.000000</td>\n",
       "      <td>562.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2002.075219</td>\n",
       "      <td>9.175416e+05</td>\n",
       "      <td>9.102045e+06</td>\n",
       "      <td>7.677799e+05</td>\n",
       "      <td>4.223743e+06</td>\n",
       "      <td>4.110522e+06</td>\n",
       "      <td>9.206242e+06</td>\n",
       "      <td>4.768010e+06</td>\n",
       "      <td>2.682587e+06</td>\n",
       "      <td>4.299509e+05</td>\n",
       "      <td>...</td>\n",
       "      <td>69166.507966</td>\n",
       "      <td>68106.537377</td>\n",
       "      <td>58420.870711</td>\n",
       "      <td>5.779547e+05</td>\n",
       "      <td>2.820691e+05</td>\n",
       "      <td>9.139695e+05</td>\n",
       "      <td>236.327434</td>\n",
       "      <td>278.280731</td>\n",
       "      <td>218.806154</td>\n",
       "      <td>263.558719</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>9.568621</td>\n",
       "      <td>1.066514e+06</td>\n",
       "      <td>1.175962e+07</td>\n",
       "      <td>1.146992e+06</td>\n",
       "      <td>5.549735e+06</td>\n",
       "      <td>5.489562e+06</td>\n",
       "      <td>1.199279e+07</td>\n",
       "      <td>6.300569e+06</td>\n",
       "      <td>3.357214e+06</td>\n",
       "      <td>5.347893e+05</td>\n",
       "      <td>...</td>\n",
       "      <td>79957.990356</td>\n",
       "      <td>77965.847263</td>\n",
       "      <td>67438.530709</td>\n",
       "      <td>6.757837e+05</td>\n",
       "      <td>3.307098e+05</td>\n",
       "      <td>1.055893e+06</td>\n",
       "      <td>9.285505</td>\n",
       "      <td>10.343482</td>\n",
       "      <td>7.681805</td>\n",
       "      <td>6.612601</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1986.000000</td>\n",
       "      <td>4.386600e+04</td>\n",
       "      <td>4.656500e+05</td>\n",
       "      <td>3.102000e+04</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>2.209300e+04</td>\n",
       "      <td>4.816650e+05</td>\n",
       "      <td>2.655490e+05</td>\n",
       "      <td>1.399630e+05</td>\n",
       "      <td>1.154100e+04</td>\n",
       "      <td>...</td>\n",
       "      <td>4577.000000</td>\n",
       "      <td>3371.000000</td>\n",
       "      <td>2572.000000</td>\n",
       "      <td>3.769800e+04</td>\n",
       "      <td>1.353000e+04</td>\n",
       "      <td>6.844900e+04</td>\n",
       "      <td>192.000000</td>\n",
       "      <td>231.000000</td>\n",
       "      <td>179.000000</td>\n",
       "      <td>236.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1994.000000</td>\n",
       "      <td>2.645145e+05</td>\n",
       "      <td>2.189504e+06</td>\n",
       "      <td>1.899575e+05</td>\n",
       "      <td>1.165776e+06</td>\n",
       "      <td>7.151210e+05</td>\n",
       "      <td>2.170404e+06</td>\n",
       "      <td>1.171336e+06</td>\n",
       "      <td>6.380760e+05</td>\n",
       "      <td>1.034492e+05</td>\n",
       "      <td>...</td>\n",
       "      <td>18971.500000</td>\n",
       "      <td>19594.250000</td>\n",
       "      <td>16076.500000</td>\n",
       "      <td>1.649250e+05</td>\n",
       "      <td>8.060800e+04</td>\n",
       "      <td>2.480832e+05</td>\n",
       "      <td>232.000000</td>\n",
       "      <td>272.000000</td>\n",
       "      <td>215.000000</td>\n",
       "      <td>260.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2002.000000</td>\n",
       "      <td>6.499335e+05</td>\n",
       "      <td>5.085826e+06</td>\n",
       "      <td>4.035480e+05</td>\n",
       "      <td>2.537754e+06</td>\n",
       "      <td>2.058996e+06</td>\n",
       "      <td>5.242672e+06</td>\n",
       "      <td>2.658253e+06</td>\n",
       "      <td>1.525471e+06</td>\n",
       "      <td>2.717040e+05</td>\n",
       "      <td>...</td>\n",
       "      <td>49087.000000</td>\n",
       "      <td>47880.000000</td>\n",
       "      <td>39408.000000</td>\n",
       "      <td>4.051115e+05</td>\n",
       "      <td>1.869190e+05</td>\n",
       "      <td>6.458050e+05</td>\n",
       "      <td>238.000000</td>\n",
       "      <td>280.500000</td>\n",
       "      <td>220.000000</td>\n",
       "      <td>265.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2010.000000</td>\n",
       "      <td>1.010532e+06</td>\n",
       "      <td>1.084516e+07</td>\n",
       "      <td>8.279320e+05</td>\n",
       "      <td>5.055548e+06</td>\n",
       "      <td>4.755293e+06</td>\n",
       "      <td>1.074420e+07</td>\n",
       "      <td>5.561959e+06</td>\n",
       "      <td>3.222924e+06</td>\n",
       "      <td>5.172222e+05</td>\n",
       "      <td>...</td>\n",
       "      <td>78504.250000</td>\n",
       "      <td>78976.000000</td>\n",
       "      <td>69397.250000</td>\n",
       "      <td>6.439752e+05</td>\n",
       "      <td>3.223280e+05</td>\n",
       "      <td>1.043420e+06</td>\n",
       "      <td>242.000000</td>\n",
       "      <td>286.000000</td>\n",
       "      <td>224.000000</td>\n",
       "      <td>268.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>2019.000000</td>\n",
       "      <td>6.307022e+06</td>\n",
       "      <td>8.921726e+07</td>\n",
       "      <td>9.990221e+06</td>\n",
       "      <td>5.090457e+07</td>\n",
       "      <td>3.610526e+07</td>\n",
       "      <td>8.532013e+07</td>\n",
       "      <td>4.396452e+07</td>\n",
       "      <td>2.605802e+07</td>\n",
       "      <td>3.995951e+06</td>\n",
       "      <td>...</td>\n",
       "      <td>493415.000000</td>\n",
       "      <td>500143.000000</td>\n",
       "      <td>498403.000000</td>\n",
       "      <td>3.929869e+06</td>\n",
       "      <td>2.013687e+06</td>\n",
       "      <td>6.441557e+06</td>\n",
       "      <td>253.000000</td>\n",
       "      <td>301.000000</td>\n",
       "      <td>237.000000</td>\n",
       "      <td>280.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows Ã— 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              YEAR        ENROLL  TOTAL_REVENUE  FEDERAL_REVENUE  \\\n",
       "count  1715.000000  1.224000e+03   1.275000e+03     1.275000e+03   \n",
       "mean   2002.075219  9.175416e+05   9.102045e+06     7.677799e+05   \n",
       "std       9.568621  1.066514e+06   1.175962e+07     1.146992e+06   \n",
       "min    1986.000000  4.386600e+04   4.656500e+05     3.102000e+04   \n",
       "25%    1994.000000  2.645145e+05   2.189504e+06     1.899575e+05   \n",
       "50%    2002.000000  6.499335e+05   5.085826e+06     4.035480e+05   \n",
       "75%    2010.000000  1.010532e+06   1.084516e+07     8.279320e+05   \n",
       "max    2019.000000  6.307022e+06   8.921726e+07     9.990221e+06   \n",
       "\n",
       "       STATE_REVENUE  LOCAL_REVENUE  TOTAL_EXPENDITURE  \\\n",
       "count   1.275000e+03   1.275000e+03       1.275000e+03   \n",
       "mean    4.223743e+06   4.110522e+06       9.206242e+06   \n",
       "std     5.549735e+06   5.489562e+06       1.199279e+07   \n",
       "min     0.000000e+00   2.209300e+04       4.816650e+05   \n",
       "25%     1.165776e+06   7.151210e+05       2.170404e+06   \n",
       "50%     2.537754e+06   2.058996e+06       5.242672e+06   \n",
       "75%     5.055548e+06   4.755293e+06       1.074420e+07   \n",
       "max     5.090457e+07   3.610526e+07       8.532013e+07   \n",
       "\n",
       "       INSTRUCTION_EXPENDITURE  SUPPORT_SERVICES_EXPENDITURE  \\\n",
       "count             1.275000e+03                  1.275000e+03   \n",
       "mean              4.768010e+06                  2.682587e+06   \n",
       "std               6.300569e+06                  3.357214e+06   \n",
       "min               2.655490e+05                  1.399630e+05   \n",
       "25%               1.171336e+06                  6.380760e+05   \n",
       "50%               2.658253e+06                  1.525471e+06   \n",
       "75%               5.561959e+06                  3.222924e+06   \n",
       "max               4.396452e+07                  2.605802e+07   \n",
       "\n",
       "       OTHER_EXPENDITURE  ...     GRADES_4_G     GRADES_8_G    GRADES_12_G  \\\n",
       "count       1.224000e+03  ...    1632.000000    1632.000000    1632.000000   \n",
       "mean        4.299509e+05  ...   69166.507966   68106.537377   58420.870711   \n",
       "std         5.347893e+05  ...   79957.990356   77965.847263   67438.530709   \n",
       "min         1.154100e+04  ...    4577.000000    3371.000000    2572.000000   \n",
       "25%         1.034492e+05  ...   18971.500000   19594.250000   16076.500000   \n",
       "50%         2.717040e+05  ...   49087.000000   47880.000000   39408.000000   \n",
       "75%         5.172222e+05  ...   78504.250000   78976.000000   69397.250000   \n",
       "max         3.995951e+06  ...  493415.000000  500143.000000  498403.000000   \n",
       "\n",
       "       GRADES_1_8_G  GRADES_9_12_G  GRADES_ALL_G  AVG_MATH_4_SCORE  \\\n",
       "count  1.020000e+03   1.071000e+03  1.632000e+03        565.000000   \n",
       "mean   5.779547e+05   2.820691e+05  9.139695e+05        236.327434   \n",
       "std    6.757837e+05   3.307098e+05  1.055893e+06          9.285505   \n",
       "min    3.769800e+04   1.353000e+04  6.844900e+04        192.000000   \n",
       "25%    1.649250e+05   8.060800e+04  2.480832e+05        232.000000   \n",
       "50%    4.051115e+05   1.869190e+05  6.458050e+05        238.000000   \n",
       "75%    6.439752e+05   3.223280e+05  1.043420e+06        242.000000   \n",
       "max    3.929869e+06   2.013687e+06  6.441557e+06        253.000000   \n",
       "\n",
       "       AVG_MATH_8_SCORE  AVG_READING_4_SCORE  AVG_READING_8_SCORE  \n",
       "count        602.000000           650.000000           562.000000  \n",
       "mean         278.280731           218.806154           263.558719  \n",
       "std           10.343482             7.681805             6.612601  \n",
       "min          231.000000           179.000000           236.000000  \n",
       "25%          272.000000           215.000000           260.000000  \n",
       "50%          280.500000           220.000000           265.000000  \n",
       "75%          286.000000           224.000000           268.000000  \n",
       "max          301.000000           237.000000           280.000000  \n",
       "\n",
       "[8 rows x 23 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "states.describe() #descriptive statistics \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f66e86f6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PRIMARY_KEY</th>\n",
       "      <th>STATE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1715</td>\n",
       "      <td>1715</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>1715</td>\n",
       "      <td>53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>1992_ALABAMA</td>\n",
       "      <td>ALABAMA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "      <td>33</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         PRIMARY_KEY    STATE\n",
       "count           1715     1715\n",
       "unique          1715       53\n",
       "top     1992_ALABAMA  ALABAMA\n",
       "freq               1       33"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "states.describe(include='O')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8847883f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['PRIMARY_KEY', 'STATE', 'YEAR', 'ENROLL', 'TOTAL_REVENUE',\n",
       "       'FEDERAL_REVENUE', 'STATE_REVENUE', 'LOCAL_REVENUE',\n",
       "       'TOTAL_EXPENDITURE', 'INSTRUCTION_EXPENDITURE',\n",
       "       'SUPPORT_SERVICES_EXPENDITURE', 'OTHER_EXPENDITURE',\n",
       "       'CAPITAL_OUTLAY_EXPENDITURE', 'GRADES_PK_G', 'GRADES_KG_G',\n",
       "       'GRADES_4_G', 'GRADES_8_G', 'GRADES_12_G', 'GRADES_1_8_G',\n",
       "       'GRADES_9_12_G', 'GRADES_ALL_G', 'AVG_MATH_4_SCORE', 'AVG_MATH_8_SCORE',\n",
       "       'AVG_READING_4_SCORE', 'AVG_READING_8_SCORE'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "states.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "4fb13125",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x125b8d550>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#2\n",
    "\n",
    "states.groupby(states['STATE']=='California')[['TOTAL_EXPENDITURE','TOTAL_REVENUE']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "e54ee9ad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TOTAL_EXPENDITURE</th>\n",
       "      <th>TOTAL_REVENUE</th>\n",
       "      <th>STATE</th>\n",
       "      <th>YEAR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1303</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>CALIFORNIA</td>\n",
       "      <td>1986</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1304</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>CALIFORNIA</td>\n",
       "      <td>1987</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1305</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>CALIFORNIA</td>\n",
       "      <td>1988</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1306</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>CALIFORNIA</td>\n",
       "      <td>1989</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1307</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>CALIFORNIA</td>\n",
       "      <td>1990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1308</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>CALIFORNIA</td>\n",
       "      <td>1991</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>27138832.0</td>\n",
       "      <td>26260025.0</td>\n",
       "      <td>CALIFORNIA</td>\n",
       "      <td>1992</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>28110986.0</td>\n",
       "      <td>28043338.0</td>\n",
       "      <td>CALIFORNIA</td>\n",
       "      <td>1993</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>106</th>\n",
       "      <td>23012688.0</td>\n",
       "      <td>23440845.0</td>\n",
       "      <td>CALIFORNIA</td>\n",
       "      <td>1994</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>157</th>\n",
       "      <td>30097549.0</td>\n",
       "      <td>29512214.0</td>\n",
       "      <td>CALIFORNIA</td>\n",
       "      <td>1995</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      TOTAL_EXPENDITURE  TOTAL_REVENUE       STATE  YEAR\n",
       "1303                NaN            NaN  CALIFORNIA  1986\n",
       "1304                NaN            NaN  CALIFORNIA  1987\n",
       "1305                NaN            NaN  CALIFORNIA  1988\n",
       "1306                NaN            NaN  CALIFORNIA  1989\n",
       "1307                NaN            NaN  CALIFORNIA  1990\n",
       "1308                NaN            NaN  CALIFORNIA  1991\n",
       "4            27138832.0     26260025.0  CALIFORNIA  1992\n",
       "55           28110986.0     28043338.0  CALIFORNIA  1993\n",
       "106          23012688.0     23440845.0  CALIFORNIA  1994\n",
       "157          30097549.0     29512214.0  CALIFORNIA  1995"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s0=states[['TOTAL_EXPENDITURE','TOTAL_REVENUE','STATE','YEAR']]\n",
    "s1=s0[s0['STATE']=='CALIFORNIA']\n",
    "s2=s1.sort_values(by='YEAR')\n",
    "s2.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "5cca5f07",
   "metadata": {},
   "outputs": [],
   "source": [
    "#2 draw a line\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "0512f7f6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total expenditure of California: [<matplotlib.lines.Line2D object at 0x12e082430>] None\n"
     ]
    }
   ],
   "source": [
    "print('Total expenditure of California:',plt.plot(s2['YEAR'],s2['TOTAL_EXPENDITURE']),plt.show())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "14acd585",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total revenue of California: [<matplotlib.lines.Line2D object at 0x12a696220>] None\n"
     ]
    }
   ],
   "source": [
    "print('Total revenue of California:',plt.plot(s2['YEAR'],s2['TOTAL_REVENUE']),plt.show())\n",
    "#we can see that around 2008, total revenue is dropped probably due to the Global Financial Crisis.\n",
    "#before that, we can also observe that increasing revenues. This is also probably because of excessive money arising from\n",
    " the expansionary monetary policies of FED.\n",
    "    #In 1994, Mexican Tequila Crisis also affected US market, therefore the revenues of California. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "e6e03c7b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>STATE</th>\n",
       "      <th>AVG_MATH_4_SCORE</th>\n",
       "      <th>AVG_MATH_8_SCORE</th>\n",
       "      <th>AVG_READING_4_SCORE</th>\n",
       "      <th>AVG_READING_8_SCORE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>CALIFORNIA</td>\n",
       "      <td>208.0</td>\n",
       "      <td>261.0</td>\n",
       "      <td>202.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>CALIFORNIA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>106</th>\n",
       "      <td>CALIFORNIA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>197.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>157</th>\n",
       "      <td>CALIFORNIA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>208</th>\n",
       "      <td>CALIFORNIA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          STATE  AVG_MATH_4_SCORE  AVG_MATH_8_SCORE  AVG_READING_4_SCORE  \\\n",
       "4    CALIFORNIA             208.0             261.0                202.0   \n",
       "55   CALIFORNIA               NaN               NaN                  NaN   \n",
       "106  CALIFORNIA               NaN               NaN                197.0   \n",
       "157  CALIFORNIA               NaN               NaN                  NaN   \n",
       "208  CALIFORNIA               NaN               NaN                  NaN   \n",
       "\n",
       "     AVG_READING_8_SCORE  \n",
       "4                    NaN  \n",
       "55                   NaN  \n",
       "106                  NaN  \n",
       "157                  NaN  \n",
       "208                  NaN  "
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#3 successful at math or reading\n",
    "s2=states[['STATE','AVG_MATH_4_SCORE', 'AVG_MATH_8_SCORE',\n",
    "       'AVG_READING_4_SCORE', 'AVG_READING_8_SCORE']]\n",
    "s3=s2[s2['STATE']=='CALIFORNIA']\n",
    "s3.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "701329ba",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/gy/b38ztks11077d8zg44kpdyy80000gp/T/ipykernel_84997/2815995352.py:1: FutureWarning: Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead.\n",
      "  s3.groupby('STATE')['AVG_MATH_4_SCORE', 'AVG_MATH_8_SCORE',\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"2\" halign=\"left\">AVG_MATH_4_SCORE</th>\n",
       "      <th colspan=\"2\" halign=\"left\">AVG_MATH_8_SCORE</th>\n",
       "      <th colspan=\"2\" halign=\"left\">AVG_READING_4_SCORE</th>\n",
       "      <th colspan=\"2\" halign=\"left\">AVG_READING_8_SCORE</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>median</th>\n",
       "      <th>mean</th>\n",
       "      <th>median</th>\n",
       "      <th>mean</th>\n",
       "      <th>median</th>\n",
       "      <th>mean</th>\n",
       "      <th>median</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>STATE</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>CALIFORNIA</th>\n",
       "      <td>227.909091</td>\n",
       "      <td>232.0</td>\n",
       "      <td>269.166667</td>\n",
       "      <td>270.0</td>\n",
       "      <td>208.230769</td>\n",
       "      <td>209.0</td>\n",
       "      <td>255.0</td>\n",
       "      <td>253.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           AVG_MATH_4_SCORE        AVG_MATH_8_SCORE         \\\n",
       "                       mean median             mean median   \n",
       "STATE                                                        \n",
       "CALIFORNIA       227.909091  232.0       269.166667  270.0   \n",
       "\n",
       "           AVG_READING_4_SCORE        AVG_READING_8_SCORE         \n",
       "                          mean median                mean median  \n",
       "STATE                                                             \n",
       "CALIFORNIA          208.230769  209.0               255.0  253.0  "
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s3.groupby('STATE')['AVG_MATH_4_SCORE', 'AVG_MATH_8_SCORE',\n",
    "       'AVG_READING_4_SCORE', 'AVG_READING_8_SCORE'].agg(['mean','median'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "c2fcbdf6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mean of average Reading Grades: 231.6153845\n",
      "mean of average math Grades: 248.537879\n"
     ]
    }
   ],
   "source": [
    "print('mean of average Reading Grades:',(208.230769+255.0)/2 )\n",
    "print('mean of average math Grades:',(227.909091+269.166667)/2 )\n",
    "#we can conclude that they are better at math"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "f23f082c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x360 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#4\n",
    "plt.figure(figsize=(15,5))\n",
    "plt.subplot(1,4,1)\n",
    "plt.hist(s3['AVG_MATH_4_SCORE'].dropna())\n",
    "plt.title('CaliforniaAVG_MATH_4_SCORE')\n",
    "plt.subplot(1,4,2)\n",
    "plt.hist(s3['AVG_MATH_8_SCORE'].dropna())\n",
    "plt.title('CaliforniaAVG_MATH_8_SCORE')\n",
    "plt.subplot(1,4,3)\n",
    "plt.hist(s3['AVG_READING_4_SCORE'].dropna())\n",
    "plt.title('CaliforniaAVG_READING_4_SCORE')\n",
    "plt.subplot(1,4,4)\n",
    "plt.hist(s3['AVG_READING_8_SCORE'].dropna())\n",
    "plt.title('CaliforniaAVG_READING_8_SCORE')\n",
    "plt.show()\n",
    "#we see that they are non-normal distributions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "f01bffd4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "STATE                   0\n",
       "AVG_MATH_4_SCORE       22\n",
       "AVG_MATH_8_SCORE       21\n",
       "AVG_READING_4_SCORE    20\n",
       "AVG_READING_8_SCORE    22\n",
       "dtype: int64"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#5 missing values\n",
    "s3.isnull().sum()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "fbdc9813",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/gy/b38ztks11077d8zg44kpdyy80000gp/T/ipykernel_84997/676143950.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  s3['imputed_mean_AVG_MATH_4_SCORE']=s3['AVG_MATH_4_SCORE'].fillna(s3['AVG_MATH_4_SCORE'].mean())\n",
      "/var/folders/gy/b38ztks11077d8zg44kpdyy80000gp/T/ipykernel_84997/676143950.py:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  s3['imputed_mean_AVG_MATH_8_SCORE']=s3['AVG_MATH_8_SCORE'].fillna(s3['AVG_MATH_8_SCORE'].mean())\n",
      "/var/folders/gy/b38ztks11077d8zg44kpdyy80000gp/T/ipykernel_84997/676143950.py:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  s3['imputed_mean_AVG_READING_4_SCORE']=s3['AVG_READING_4_SCORE'].fillna(s3['AVG_READING_4_SCORE'].mean())\n",
      "/var/folders/gy/b38ztks11077d8zg44kpdyy80000gp/T/ipykernel_84997/676143950.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  s3['imputed_mean_AVG_READING_8_SCORE']=s3['AVG_READING_8_SCORE'].fillna(s3['AVG_READING_8_SCORE'].mean())\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>STATE</th>\n",
       "      <th>AVG_MATH_4_SCORE</th>\n",
       "      <th>AVG_MATH_8_SCORE</th>\n",
       "      <th>AVG_READING_4_SCORE</th>\n",
       "      <th>AVG_READING_8_SCORE</th>\n",
       "      <th>imputedAVG_MATH_4_SCORE</th>\n",
       "      <th>imputedAVG_MATH_8_SCORE</th>\n",
       "      <th>imputedAVG_READING_4_SCORE</th>\n",
       "      <th>imputedAVG_READING_8_SCORE</th>\n",
       "      <th>imputed_median_AVG_MATH_4_SCORE</th>\n",
       "      <th>imputed_median_AVG_MATH_8_SCORE</th>\n",
       "      <th>imputed_median_AVG_READING_4_SCORE</th>\n",
       "      <th>imputed_median_AVG_READING_8_SCORE</th>\n",
       "      <th>imputed_mean_AVG_MATH_4_SCORE</th>\n",
       "      <th>imputed_mean_AVG_MATH_8_SCORE</th>\n",
       "      <th>imputed_mean_AVG_READING_4_SCORE</th>\n",
       "      <th>imputed_mean_AVG_READING_8_SCORE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>CALIFORNIA</td>\n",
       "      <td>208.0</td>\n",
       "      <td>261.0</td>\n",
       "      <td>202.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>208.000000</td>\n",
       "      <td>261.000000</td>\n",
       "      <td>202.000000</td>\n",
       "      <td>255.0</td>\n",
       "      <td>208.0</td>\n",
       "      <td>261.0</td>\n",
       "      <td>202.0</td>\n",
       "      <td>253.0</td>\n",
       "      <td>208.000000</td>\n",
       "      <td>261.000000</td>\n",
       "      <td>202.000000</td>\n",
       "      <td>255.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>CALIFORNIA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>227.909091</td>\n",
       "      <td>269.166667</td>\n",
       "      <td>208.230769</td>\n",
       "      <td>255.0</td>\n",
       "      <td>232.0</td>\n",
       "      <td>270.0</td>\n",
       "      <td>209.0</td>\n",
       "      <td>253.0</td>\n",
       "      <td>227.909091</td>\n",
       "      <td>269.166667</td>\n",
       "      <td>208.230769</td>\n",
       "      <td>255.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>106</th>\n",
       "      <td>CALIFORNIA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>197.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>227.909091</td>\n",
       "      <td>269.166667</td>\n",
       "      <td>197.000000</td>\n",
       "      <td>255.0</td>\n",
       "      <td>232.0</td>\n",
       "      <td>270.0</td>\n",
       "      <td>197.0</td>\n",
       "      <td>253.0</td>\n",
       "      <td>227.909091</td>\n",
       "      <td>269.166667</td>\n",
       "      <td>197.000000</td>\n",
       "      <td>255.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>157</th>\n",
       "      <td>CALIFORNIA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>227.909091</td>\n",
       "      <td>269.166667</td>\n",
       "      <td>208.230769</td>\n",
       "      <td>255.0</td>\n",
       "      <td>232.0</td>\n",
       "      <td>270.0</td>\n",
       "      <td>209.0</td>\n",
       "      <td>253.0</td>\n",
       "      <td>227.909091</td>\n",
       "      <td>269.166667</td>\n",
       "      <td>208.230769</td>\n",
       "      <td>255.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>208</th>\n",
       "      <td>CALIFORNIA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>227.909091</td>\n",
       "      <td>269.166667</td>\n",
       "      <td>208.230769</td>\n",
       "      <td>255.0</td>\n",
       "      <td>232.0</td>\n",
       "      <td>270.0</td>\n",
       "      <td>209.0</td>\n",
       "      <td>253.0</td>\n",
       "      <td>227.909091</td>\n",
       "      <td>269.166667</td>\n",
       "      <td>208.230769</td>\n",
       "      <td>255.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          STATE  AVG_MATH_4_SCORE  AVG_MATH_8_SCORE  AVG_READING_4_SCORE  \\\n",
       "4    CALIFORNIA             208.0             261.0                202.0   \n",
       "55   CALIFORNIA               NaN               NaN                  NaN   \n",
       "106  CALIFORNIA               NaN               NaN                197.0   \n",
       "157  CALIFORNIA               NaN               NaN                  NaN   \n",
       "208  CALIFORNIA               NaN               NaN                  NaN   \n",
       "\n",
       "     AVG_READING_8_SCORE  imputedAVG_MATH_4_SCORE  imputedAVG_MATH_8_SCORE  \\\n",
       "4                    NaN               208.000000               261.000000   \n",
       "55                   NaN               227.909091               269.166667   \n",
       "106                  NaN               227.909091               269.166667   \n",
       "157                  NaN               227.909091               269.166667   \n",
       "208                  NaN               227.909091               269.166667   \n",
       "\n",
       "     imputedAVG_READING_4_SCORE  imputedAVG_READING_8_SCORE  \\\n",
       "4                    202.000000                       255.0   \n",
       "55                   208.230769                       255.0   \n",
       "106                  197.000000                       255.0   \n",
       "157                  208.230769                       255.0   \n",
       "208                  208.230769                       255.0   \n",
       "\n",
       "     imputed_median_AVG_MATH_4_SCORE  imputed_median_AVG_MATH_8_SCORE  \\\n",
       "4                              208.0                            261.0   \n",
       "55                             232.0                            270.0   \n",
       "106                            232.0                            270.0   \n",
       "157                            232.0                            270.0   \n",
       "208                            232.0                            270.0   \n",
       "\n",
       "     imputed_median_AVG_READING_4_SCORE  imputed_median_AVG_READING_8_SCORE  \\\n",
       "4                                 202.0                               253.0   \n",
       "55                                209.0                               253.0   \n",
       "106                               197.0                               253.0   \n",
       "157                               209.0                               253.0   \n",
       "208                               209.0                               253.0   \n",
       "\n",
       "     imputed_mean_AVG_MATH_4_SCORE  imputed_mean_AVG_MATH_8_SCORE  \\\n",
       "4                       208.000000                     261.000000   \n",
       "55                      227.909091                     269.166667   \n",
       "106                     227.909091                     269.166667   \n",
       "157                     227.909091                     269.166667   \n",
       "208                     227.909091                     269.166667   \n",
       "\n",
       "     imputed_mean_AVG_READING_4_SCORE  imputed_mean_AVG_READING_8_SCORE  \n",
       "4                          202.000000                             255.0  \n",
       "55                         208.230769                             255.0  \n",
       "106                        197.000000                             255.0  \n",
       "157                        208.230769                             255.0  \n",
       "208                        208.230769                             255.0  "
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#5 filling values\n",
    "s3['imputed_mean_AVG_MATH_4_SCORE']=s3['AVG_MATH_4_SCORE'].fillna(s3['AVG_MATH_4_SCORE'].mean())\n",
    "s3['imputed_mean_AVG_MATH_8_SCORE']=s3['AVG_MATH_8_SCORE'].fillna(s3['AVG_MATH_8_SCORE'].mean())\n",
    "s3['imputed_mean_AVG_READING_4_SCORE']=s3['AVG_READING_4_SCORE'].fillna(s3['AVG_READING_4_SCORE'].mean())\n",
    "s3['imputed_mean_AVG_READING_8_SCORE']=s3['AVG_READING_8_SCORE'].fillna(s3['AVG_READING_8_SCORE'].mean())\n",
    "s3.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "7160739a",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/gy/b38ztks11077d8zg44kpdyy80000gp/T/ipykernel_84997/2140799558.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  s3['imputed_median_AVG_MATH_4_SCORE']=s3['AVG_MATH_4_SCORE'].fillna(s3['AVG_MATH_4_SCORE'].median())\n",
      "/var/folders/gy/b38ztks11077d8zg44kpdyy80000gp/T/ipykernel_84997/2140799558.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  s3['imputed_median_AVG_MATH_8_SCORE']=s3['AVG_MATH_8_SCORE'].fillna(s3['AVG_MATH_8_SCORE'].median())\n",
      "/var/folders/gy/b38ztks11077d8zg44kpdyy80000gp/T/ipykernel_84997/2140799558.py:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  s3['imputed_median_AVG_READING_4_SCORE']=s3['AVG_READING_4_SCORE'].fillna(s3['AVG_READING_4_SCORE'].median())\n",
      "/var/folders/gy/b38ztks11077d8zg44kpdyy80000gp/T/ipykernel_84997/2140799558.py:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  s3['imputed_median_AVG_READING_8_SCORE']=s3['AVG_READING_8_SCORE'].fillna(s3['AVG_READING_8_SCORE'].median())\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>STATE</th>\n",
       "      <th>AVG_MATH_4_SCORE</th>\n",
       "      <th>AVG_MATH_8_SCORE</th>\n",
       "      <th>AVG_READING_4_SCORE</th>\n",
       "      <th>AVG_READING_8_SCORE</th>\n",
       "      <th>imputedAVG_MATH_4_SCORE</th>\n",
       "      <th>imputedAVG_MATH_8_SCORE</th>\n",
       "      <th>imputedAVG_READING_4_SCORE</th>\n",
       "      <th>imputedAVG_READING_8_SCORE</th>\n",
       "      <th>imputed_median_AVG_MATH_4_SCORE</th>\n",
       "      <th>imputed_median_AVG_MATH_8_SCORE</th>\n",
       "      <th>imputed_median_AVG_READING_4_SCORE</th>\n",
       "      <th>imputed_median_AVG_READING_8_SCORE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>CALIFORNIA</td>\n",
       "      <td>208.0</td>\n",
       "      <td>261.0</td>\n",
       "      <td>202.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>208.000000</td>\n",
       "      <td>261.000000</td>\n",
       "      <td>202.000000</td>\n",
       "      <td>255.0</td>\n",
       "      <td>208.0</td>\n",
       "      <td>261.0</td>\n",
       "      <td>202.0</td>\n",
       "      <td>253.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>CALIFORNIA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>227.909091</td>\n",
       "      <td>269.166667</td>\n",
       "      <td>208.230769</td>\n",
       "      <td>255.0</td>\n",
       "      <td>232.0</td>\n",
       "      <td>270.0</td>\n",
       "      <td>209.0</td>\n",
       "      <td>253.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>106</th>\n",
       "      <td>CALIFORNIA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>197.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>227.909091</td>\n",
       "      <td>269.166667</td>\n",
       "      <td>197.000000</td>\n",
       "      <td>255.0</td>\n",
       "      <td>232.0</td>\n",
       "      <td>270.0</td>\n",
       "      <td>197.0</td>\n",
       "      <td>253.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>157</th>\n",
       "      <td>CALIFORNIA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>227.909091</td>\n",
       "      <td>269.166667</td>\n",
       "      <td>208.230769</td>\n",
       "      <td>255.0</td>\n",
       "      <td>232.0</td>\n",
       "      <td>270.0</td>\n",
       "      <td>209.0</td>\n",
       "      <td>253.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>208</th>\n",
       "      <td>CALIFORNIA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>227.909091</td>\n",
       "      <td>269.166667</td>\n",
       "      <td>208.230769</td>\n",
       "      <td>255.0</td>\n",
       "      <td>232.0</td>\n",
       "      <td>270.0</td>\n",
       "      <td>209.0</td>\n",
       "      <td>253.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          STATE  AVG_MATH_4_SCORE  AVG_MATH_8_SCORE  AVG_READING_4_SCORE  \\\n",
       "4    CALIFORNIA             208.0             261.0                202.0   \n",
       "55   CALIFORNIA               NaN               NaN                  NaN   \n",
       "106  CALIFORNIA               NaN               NaN                197.0   \n",
       "157  CALIFORNIA               NaN               NaN                  NaN   \n",
       "208  CALIFORNIA               NaN               NaN                  NaN   \n",
       "\n",
       "     AVG_READING_8_SCORE  imputedAVG_MATH_4_SCORE  imputedAVG_MATH_8_SCORE  \\\n",
       "4                    NaN               208.000000               261.000000   \n",
       "55                   NaN               227.909091               269.166667   \n",
       "106                  NaN               227.909091               269.166667   \n",
       "157                  NaN               227.909091               269.166667   \n",
       "208                  NaN               227.909091               269.166667   \n",
       "\n",
       "     imputedAVG_READING_4_SCORE  imputedAVG_READING_8_SCORE  \\\n",
       "4                    202.000000                       255.0   \n",
       "55                   208.230769                       255.0   \n",
       "106                  197.000000                       255.0   \n",
       "157                  208.230769                       255.0   \n",
       "208                  208.230769                       255.0   \n",
       "\n",
       "     imputed_median_AVG_MATH_4_SCORE  imputed_median_AVG_MATH_8_SCORE  \\\n",
       "4                              208.0                            261.0   \n",
       "55                             232.0                            270.0   \n",
       "106                            232.0                            270.0   \n",
       "157                            232.0                            270.0   \n",
       "208                            232.0                            270.0   \n",
       "\n",
       "     imputed_median_AVG_READING_4_SCORE  imputed_median_AVG_READING_8_SCORE  \n",
       "4                                 202.0                               253.0  \n",
       "55                                209.0                               253.0  \n",
       "106                               197.0                               253.0  \n",
       "157                               209.0                               253.0  \n",
       "208                               209.0                               253.0  "
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s3['imputed_median_AVG_MATH_4_SCORE']=s3['AVG_MATH_4_SCORE'].fillna(s3['AVG_MATH_4_SCORE'].median())\n",
    "s3['imputed_median_AVG_MATH_8_SCORE']=s3['AVG_MATH_8_SCORE'].fillna(s3['AVG_MATH_8_SCORE'].median())\n",
    "s3['imputed_median_AVG_READING_4_SCORE']=s3['AVG_READING_4_SCORE'].fillna(s3['AVG_READING_4_SCORE'].median())\n",
    "s3['imputed_median_AVG_READING_8_SCORE']=s3['AVG_READING_8_SCORE'].fillna(s3['AVG_READING_8_SCORE'].median())\n",
    "s3.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "5dbad986",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/gy/b38ztks11077d8zg44kpdyy80000gp/T/ipykernel_84997/3545135132.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  s3['interpolated_AVG_MATH_4_SCORE']=s3['AVG_MATH_4_SCORE'].interpolate(method='linear',limit_direction='forward')\n",
      "/var/folders/gy/b38ztks11077d8zg44kpdyy80000gp/T/ipykernel_84997/3545135132.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  s3['interpolated_AVG_MATH_8_SCORE']=s3['AVG_MATH_8_SCORE'].interpolate(method='linear',limit_direction='forward')\n",
      "/var/folders/gy/b38ztks11077d8zg44kpdyy80000gp/T/ipykernel_84997/3545135132.py:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  s3['interpolated_AVG_READING_4_SCORE']=s3['AVG_READING_4_SCORE'].interpolate(method='linear',limit_direction='forward')\n",
      "/var/folders/gy/b38ztks11077d8zg44kpdyy80000gp/T/ipykernel_84997/3545135132.py:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  s3['interpolated_AVG_READING_8_SCORE']=s3['AVG_READING_8_SCORE'].interpolate(method='linear',limit_direction='forward')\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>STATE</th>\n",
       "      <th>AVG_MATH_4_SCORE</th>\n",
       "      <th>AVG_MATH_8_SCORE</th>\n",
       "      <th>AVG_READING_4_SCORE</th>\n",
       "      <th>AVG_READING_8_SCORE</th>\n",
       "      <th>imputedAVG_MATH_4_SCORE</th>\n",
       "      <th>imputedAVG_MATH_8_SCORE</th>\n",
       "      <th>imputedAVG_READING_4_SCORE</th>\n",
       "      <th>imputedAVG_READING_8_SCORE</th>\n",
       "      <th>imputed_median_AVG_MATH_4_SCORE</th>\n",
       "      <th>...</th>\n",
       "      <th>imputed_median_AVG_READING_4_SCORE</th>\n",
       "      <th>imputed_median_AVG_READING_8_SCORE</th>\n",
       "      <th>imputed_mean_AVG_MATH_4_SCORE</th>\n",
       "      <th>imputed_mean_AVG_MATH_8_SCORE</th>\n",
       "      <th>imputed_mean_AVG_READING_4_SCORE</th>\n",
       "      <th>imputed_mean_AVG_READING_8_SCORE</th>\n",
       "      <th>interpolated_AVG_MATH_4_SCORE</th>\n",
       "      <th>interpolated_AVG_MATH_8_SCORE</th>\n",
       "      <th>interpolated_AVG_READING_4_SCORE</th>\n",
       "      <th>interpolated_AVG_READING_8_SCORE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>CALIFORNIA</td>\n",
       "      <td>208.0</td>\n",
       "      <td>261.0</td>\n",
       "      <td>202.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>208.000000</td>\n",
       "      <td>261.000000</td>\n",
       "      <td>202.000000</td>\n",
       "      <td>255.0</td>\n",
       "      <td>208.0</td>\n",
       "      <td>...</td>\n",
       "      <td>202.0</td>\n",
       "      <td>253.0</td>\n",
       "      <td>208.000000</td>\n",
       "      <td>261.000000</td>\n",
       "      <td>202.000000</td>\n",
       "      <td>255.0</td>\n",
       "      <td>208.000</td>\n",
       "      <td>261.000</td>\n",
       "      <td>202.00</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>CALIFORNIA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>227.909091</td>\n",
       "      <td>269.166667</td>\n",
       "      <td>208.230769</td>\n",
       "      <td>255.0</td>\n",
       "      <td>232.0</td>\n",
       "      <td>...</td>\n",
       "      <td>209.0</td>\n",
       "      <td>253.0</td>\n",
       "      <td>227.909091</td>\n",
       "      <td>269.166667</td>\n",
       "      <td>208.230769</td>\n",
       "      <td>255.0</td>\n",
       "      <td>208.625</td>\n",
       "      <td>260.875</td>\n",
       "      <td>199.50</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>106</th>\n",
       "      <td>CALIFORNIA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>197.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>227.909091</td>\n",
       "      <td>269.166667</td>\n",
       "      <td>197.000000</td>\n",
       "      <td>255.0</td>\n",
       "      <td>232.0</td>\n",
       "      <td>...</td>\n",
       "      <td>197.0</td>\n",
       "      <td>253.0</td>\n",
       "      <td>227.909091</td>\n",
       "      <td>269.166667</td>\n",
       "      <td>197.000000</td>\n",
       "      <td>255.0</td>\n",
       "      <td>209.250</td>\n",
       "      <td>260.750</td>\n",
       "      <td>197.00</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>157</th>\n",
       "      <td>CALIFORNIA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>227.909091</td>\n",
       "      <td>269.166667</td>\n",
       "      <td>208.230769</td>\n",
       "      <td>255.0</td>\n",
       "      <td>232.0</td>\n",
       "      <td>...</td>\n",
       "      <td>209.0</td>\n",
       "      <td>253.0</td>\n",
       "      <td>227.909091</td>\n",
       "      <td>269.166667</td>\n",
       "      <td>208.230769</td>\n",
       "      <td>255.0</td>\n",
       "      <td>209.875</td>\n",
       "      <td>260.625</td>\n",
       "      <td>198.25</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>208</th>\n",
       "      <td>CALIFORNIA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>227.909091</td>\n",
       "      <td>269.166667</td>\n",
       "      <td>208.230769</td>\n",
       "      <td>255.0</td>\n",
       "      <td>232.0</td>\n",
       "      <td>...</td>\n",
       "      <td>209.0</td>\n",
       "      <td>253.0</td>\n",
       "      <td>227.909091</td>\n",
       "      <td>269.166667</td>\n",
       "      <td>208.230769</td>\n",
       "      <td>255.0</td>\n",
       "      <td>210.500</td>\n",
       "      <td>260.500</td>\n",
       "      <td>199.50</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          STATE  AVG_MATH_4_SCORE  AVG_MATH_8_SCORE  AVG_READING_4_SCORE  \\\n",
       "4    CALIFORNIA             208.0             261.0                202.0   \n",
       "55   CALIFORNIA               NaN               NaN                  NaN   \n",
       "106  CALIFORNIA               NaN               NaN                197.0   \n",
       "157  CALIFORNIA               NaN               NaN                  NaN   \n",
       "208  CALIFORNIA               NaN               NaN                  NaN   \n",
       "\n",
       "     AVG_READING_8_SCORE  imputedAVG_MATH_4_SCORE  imputedAVG_MATH_8_SCORE  \\\n",
       "4                    NaN               208.000000               261.000000   \n",
       "55                   NaN               227.909091               269.166667   \n",
       "106                  NaN               227.909091               269.166667   \n",
       "157                  NaN               227.909091               269.166667   \n",
       "208                  NaN               227.909091               269.166667   \n",
       "\n",
       "     imputedAVG_READING_4_SCORE  imputedAVG_READING_8_SCORE  \\\n",
       "4                    202.000000                       255.0   \n",
       "55                   208.230769                       255.0   \n",
       "106                  197.000000                       255.0   \n",
       "157                  208.230769                       255.0   \n",
       "208                  208.230769                       255.0   \n",
       "\n",
       "     imputed_median_AVG_MATH_4_SCORE  ...  imputed_median_AVG_READING_4_SCORE  \\\n",
       "4                              208.0  ...                               202.0   \n",
       "55                             232.0  ...                               209.0   \n",
       "106                            232.0  ...                               197.0   \n",
       "157                            232.0  ...                               209.0   \n",
       "208                            232.0  ...                               209.0   \n",
       "\n",
       "     imputed_median_AVG_READING_8_SCORE  imputed_mean_AVG_MATH_4_SCORE  \\\n",
       "4                                 253.0                     208.000000   \n",
       "55                                253.0                     227.909091   \n",
       "106                               253.0                     227.909091   \n",
       "157                               253.0                     227.909091   \n",
       "208                               253.0                     227.909091   \n",
       "\n",
       "     imputed_mean_AVG_MATH_8_SCORE  imputed_mean_AVG_READING_4_SCORE  \\\n",
       "4                       261.000000                        202.000000   \n",
       "55                      269.166667                        208.230769   \n",
       "106                     269.166667                        197.000000   \n",
       "157                     269.166667                        208.230769   \n",
       "208                     269.166667                        208.230769   \n",
       "\n",
       "     imputed_mean_AVG_READING_8_SCORE  interpolated_AVG_MATH_4_SCORE  \\\n",
       "4                               255.0                        208.000   \n",
       "55                              255.0                        208.625   \n",
       "106                             255.0                        209.250   \n",
       "157                             255.0                        209.875   \n",
       "208                             255.0                        210.500   \n",
       "\n",
       "     interpolated_AVG_MATH_8_SCORE  interpolated_AVG_READING_4_SCORE  \\\n",
       "4                          261.000                            202.00   \n",
       "55                         260.875                            199.50   \n",
       "106                        260.750                            197.00   \n",
       "157                        260.625                            198.25   \n",
       "208                        260.500                            199.50   \n",
       "\n",
       "     interpolated_AVG_READING_8_SCORE  \n",
       "4                                 NaN  \n",
       "55                                NaN  \n",
       "106                               NaN  \n",
       "157                               NaN  \n",
       "208                               NaN  \n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s3['interpolated_AVG_MATH_4_SCORE']=s3['AVG_MATH_4_SCORE'].interpolate(method='linear',limit_direction='forward')\n",
    "s3['interpolated_AVG_MATH_8_SCORE']=s3['AVG_MATH_8_SCORE'].interpolate(method='linear',limit_direction='forward')\n",
    "s3['interpolated_AVG_READING_4_SCORE']=s3['AVG_READING_4_SCORE'].interpolate(method='linear',limit_direction='forward')\n",
    "s3['interpolated_AVG_READING_8_SCORE']=s3['AVG_READING_8_SCORE'].interpolate(method='linear',limit_direction='forward')\n",
    "s3.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "226070df",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['STATE', 'AVG_MATH_4_SCORE', 'AVG_MATH_8_SCORE', 'AVG_READING_4_SCORE',\n",
       "       'AVG_READING_8_SCORE', 'imputedAVG_MATH_4_SCORE',\n",
       "       'imputedAVG_MATH_8_SCORE', 'imputedAVG_READING_4_SCORE',\n",
       "       'imputedAVG_READING_8_SCORE', 'imputed_median_AVG_MATH_4_SCORE',\n",
       "       'imputed_median_AVG_MATH_8_SCORE', 'imputed_median_AVG_READING_4_SCORE',\n",
       "       'imputed_median_AVG_READING_8_SCORE', 'imputed_mean_AVG_MATH_4_SCORE',\n",
       "       'imputed_mean_AVG_MATH_8_SCORE', 'imputed_mean_AVG_READING_4_SCORE',\n",
       "       'imputed_mean_AVG_READING_8_SCORE', 'interpolated_AVG_MATH_4_SCORE',\n",
       "       'interpolated_AVG_MATH_8_SCORE', 'interpolated_AVG_READING_4_SCORE',\n",
       "       'interpolated_AVG_READING_8_SCORE'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#comparison of one of the columns wrt mean,median,interpolated version"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "60138dff",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x576 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(20,8))\n",
    "plt.subplot(1,4,1)\n",
    "plt.hist(s3['AVG_MATH_4_SCORE'])\n",
    "plt.title('CaliforniaAVG_MATH_4_SCORE')\n",
    "plt.subplot(1,4,2)\n",
    "plt.hist(s3['imputedAVG_MATH_4_SCORE'])\n",
    "plt.title('California_imputedAVG_MATH_4_SCORE')\n",
    "plt.subplot(1,4,3)\n",
    "plt.hist(s3['imputed_median_AVG_MATH_4_SCORE'])\n",
    "plt.title('California_imputed_median_AVG_MATH_4_SCORE')\n",
    "plt.subplot(1,4,4)\n",
    "plt.hist(s3['interpolated_AVG_MATH_4_SCORE'])\n",
    "plt.title('California_interpolated_AVG_MATH_4_SCORE')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7cb4a223",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
